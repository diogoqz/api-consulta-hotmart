#!/usr/bin/env node

/**
 * Script de inicializa√ß√£o do banco de dados
 * Para ser executado no EasyPanel ap√≥s o deploy
 */

const HotmartCSVProcessor = require('./csv-to-sqlite.js');
const CaktoProcessor = require('./cakto-processor.js');
const fs = require('fs');
const path = require('path');

async function initializeDatabase() {
    console.log('üöÄ Iniciando inicializa√ß√£o do banco de dados...');
    
    try {
        // Verificar se os arquivos CSV existem
        const hotmartCSV = './relatorio-hotmart.csv';
        const caktoCSV = './vendas-cakto.csv';
        
        console.log('üìÅ Verificando arquivos CSV...');
        
        if (!fs.existsSync(hotmartCSV)) {
            console.log('‚ö†Ô∏è  Arquivo relatorio-hotmart.csv n√£o encontrado');
            console.log('üìù Criando tabela vazia para Hotmart...');
            
            const hotmartProcessor = new HotmartCSVProcessor();
            await hotmartProcessor.initDatabase();
            await hotmartProcessor.createTables();
            
            console.log('‚úÖ Tabela Hotmart criada com sucesso');
        } else {
            console.log('‚úÖ Arquivo relatorio-hotmart.csv encontrado');
            console.log('üîÑ Processando dados do Hotmart...');
            
            const hotmartProcessor = new HotmartCSVProcessor();
            const hotmartStats = await hotmartProcessor.process();
            
            console.log('üìä Estat√≠sticas Hotmart:', hotmartStats);
        }
        
        if (!fs.existsSync(caktoCSV)) {
            console.log('‚ö†Ô∏è  Arquivo vendas-cakto.csv n√£o encontrado');
            console.log('üìù Criando tabela vazia para Cakto...');
            
            const caktoProcessor = new CaktoProcessor();
            await caktoProcessor.initDatabase();
            await caktoProcessor.createTable();
            await caktoProcessor.createIndexes();
            
            console.log('‚úÖ Tabela Cakto criada com sucesso');
        } else {
            console.log('‚úÖ Arquivo vendas-cakto.csv encontrado');
            console.log('üîÑ Processando dados da Cakto...');
            
            const caktoProcessor = new CaktoProcessor();
            const caktoStats = await caktoProcessor.process();
            
            console.log('üìä Estat√≠sticas Cakto:', caktoStats);
        }
        
        // Verificar se as tabelas foram criadas
        console.log('üîç Verificando cria√ß√£o das tabelas...');
        
        const hotmartProcessor = new HotmartCSVProcessor();
        await hotmartProcessor.initDatabase();
        
        const caktoProcessor = new CaktoProcessor();
        await caktoProcessor.initDatabase();
        
        // Testar consultas b√°sicas
        try {
            const hotmartStats = await hotmartProcessor.getStatistics();
            console.log('‚úÖ Tabela Hotmart funcionando:', hotmartStats);
        } catch (error) {
            console.log('‚ùå Erro na tabela Hotmart:', error.message);
        }
        
        try {
            const caktoStats = await caktoProcessor.getStatistics();
            console.log('‚úÖ Tabela Cakto funcionando:', caktoStats);
        } catch (error) {
            console.log('‚ùå Erro na tabela Cakto:', error.message);
        }
        
        console.log('üéâ Inicializa√ß√£o do banco de dados conclu√≠da!');
        console.log('üìä Sistema pronto para uso');
        
    } catch (error) {
        console.error('‚ùå Erro durante inicializa√ß√£o:', error.message);
        console.error('Stack trace:', error.stack);
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    initializeDatabase()
        .then(() => {
            console.log('‚úÖ Script de inicializa√ß√£o executado com sucesso');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Erro fatal:', error.message);
            process.exit(1);
        });
}

module.exports = { initializeDatabase };
