#!/usr/bin/env node

/**
 * Script de diagn√≥stico para EasyPanel
 * Verifica todos os componentes do sistema
 */

const fs = require('fs');
const path = require('path');

console.log('üîç DIAGN√ìSTICO EASYPANEL - INICIANDO...');
console.log('==========================================');

// 1. Verificar arquivos essenciais
console.log('\nüìÅ 1. VERIFICANDO ARQUIVOS ESSENCIAIS:');
const arquivosEssenciais = [
    'server.js',
    'package.json',
    'csv-to-sqlite.js',
    'cakto-processor.js',
    'init-db.js',
    'Dockerfile',
    'docker-compose.yml'
];

arquivosEssenciais.forEach(arquivo => {
    if (fs.existsSync(arquivo)) {
        console.log(`‚úÖ ${arquivo} - OK`);
    } else {
        console.log(`‚ùå ${arquivo} - FALTANDO`);
    }
});

// 2. Verificar diret√≥rios
console.log('\nüìÇ 2. VERIFICANDO DIRET√ìRIOS:');
const diretorios = ['public', 'uploads'];
diretorios.forEach(dir => {
    if (fs.existsSync(dir)) {
        console.log(`‚úÖ ${dir}/ - OK`);
    } else {
        console.log(`‚ùå ${dir}/ - FALTANDO`);
    }
});

// 3. Verificar arquivos CSV
console.log('\nüìä 3. VERIFICANDO ARQUIVOS CSV:');
const csvFiles = ['relatorio-hotmart.csv', 'vendas-cakto.csv'];
csvFiles.forEach(csv => {
    if (fs.existsSync(csv)) {
        const stats = fs.statSync(csv);
        console.log(`‚úÖ ${csv} - ${(stats.size / 1024).toFixed(2)} KB`);
    } else {
        console.log(`‚ö†Ô∏è  ${csv} - N√ÉO ENCONTRADO (normal se n√£o foi enviado)`);
    }
});

// 4. Verificar banco de dados
console.log('\nüóÑÔ∏è 4. VERIFICANDO BANCO DE DADOS:');
const dbFiles = ['hotmart.db', 'cakto.db'];
dbFiles.forEach(db => {
    if (fs.existsSync(db)) {
        const stats = fs.statSync(db);
        console.log(`‚úÖ ${db} - ${(stats.size / 1024).toFixed(2)} KB`);
    } else {
        console.log(`‚ö†Ô∏è  ${db} - N√ÉO ENCONTRADO (ser√° criado automaticamente)`);
    }
});

// 5. Verificar vari√°veis de ambiente
console.log('\nüåç 5. VERIFICANDO VARI√ÅVEIS DE AMBIENTE:');
console.log(`NODE_ENV: ${process.env.NODE_ENV || 'n√£o definido'}`);
console.log(`PORT: ${process.env.PORT || '3000 (padr√£o)'}`);
console.log(`PWD: ${process.env.PWD || 'n√£o definido'}`);

// 6. Verificar permiss√µes
console.log('\nüîê 6. VERIFICANDO PERMISS√ïES:');
try {
    fs.accessSync('.', fs.constants.R_OK | fs.constants.W_OK);
    console.log('‚úÖ Permiss√µes de leitura/escrita - OK');
} catch (error) {
    console.log('‚ùå Problema com permiss√µes:', error.message);
}

// 7. Testar m√≥dulos Node.js
console.log('\nüì¶ 7. TESTANDO M√ìDULOS NODE.JS:');
const modulos = ['express', 'sqlite3', 'cors', 'multer'];
modulos.forEach(modulo => {
    try {
        require(modulo);
        console.log(`‚úÖ ${modulo} - OK`);
    } catch (error) {
        console.log(`‚ùå ${modulo} - ERRO: ${error.message}`);
    }
});

// 8. Verificar package.json
console.log('\nüìã 8. VERIFICANDO PACKAGE.JSON:');
try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    console.log(`‚úÖ Nome: ${packageJson.name}`);
    console.log(`‚úÖ Vers√£o: ${packageJson.version}`);
    console.log(`‚úÖ Script start: ${packageJson.scripts.start || 'n√£o definido'}`);
    console.log(`‚úÖ Depend√™ncias: ${Object.keys(packageJson.dependencies || {}).length}`);
} catch (error) {
    console.log(`‚ùå Erro ao ler package.json: ${error.message}`);
}

console.log('\n==========================================');
console.log('üîç DIAGN√ìSTICO CONCLU√çDO');
console.log('==========================================');

// 9. Recomenda√ß√µes
console.log('\nüí° RECOMENDA√á√ïES:');
console.log('1. Se algum arquivo estiver faltando, verifique o deploy');
console.log('2. Se m√≥dulos falharem, execute: npm install');
console.log('3. Se banco n√£o existir, execute: npm run init-db');
console.log('4. Para iniciar servidor: npm start');
console.log('5. Verifique logs do EasyPanel para erros espec√≠ficos');

console.log('\nüöÄ PR√ìXIMOS PASSOS:');
console.log('1. Execute: npm install');
console.log('2. Execute: npm run init-db');
console.log('3. Execute: npm start');
console.log('4. Verifique se a porta est√° correta no EasyPanel');
console.log('5. Teste: curl http://localhost:3000/api/health');
